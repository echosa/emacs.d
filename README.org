#+TITLE: Echosa's Emacs Configuration
#+AUTHOR: Echosa
#+OPTIONS: toc:4 h:4
* Introduction
  Inspired by [[http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/][Sacha Chua]], I have moved my Emacs configuration into an
  organized and descriptive [[http://orgmode.org][org-mode]] file. What you are reading now
  is, in fact, my Emacs configuration file.

  Well, sort of.

  How this works is based around a part of org-mode called
  org-babel. org-babel allows org-mode to execute code that is
  embedded into a .org file. If you look at the [[https://github.com/echosa/emacs.d/blob/master/init.el][actual .emacs file]]
  that my Emacs loads, you'll see that all it does is load the .org
  file containing my configuration (the one you're reading now) and
  parse it through org-babel to execute only the blocks of elisp that
  make up the actual configuration, while ignoring the extra
  documetation and narrative, like this introdution section.

  If you're wondering about performance, org-babel doesn't do this
  parse every time I open Emacs. Instead, it sees that I'm trying to
  load ~emacs-config.org~ and checks for the existence of
  ~emacs-config.el~. If it doesn't find that file, or finds an out of
  date version, only then does it parse the .org file to create a new
  .el file. This means there's a bit of a slow startup the first time
  after the org-mode file is changes, but after that there's no
  noticable change in performance (at least on my machine).

  Anyway, what follows is my actual Emacs configuration, embedded into
  a descriptive narrative.

* Installation
** Get from GitHub
   First, you need to get the config from GitHub. I recommend actually cloning
   instead of just downloading a zip file, because a cloned repo will be
   easier to update.

   First, delete, move, or rename your existing Emacs configuration
   (both the ~.emacs.d/~ directory and your ~.emacs~ init file). Next,
   clone the repository into your home directory:

   ~$ git clone git@github.com:echosa/emacs.d.git ~/.emacs.d~

** Start Emacs
   Simply run Emacs and wait a bit! All the necessary packages will
   download and install automatically and everything will be
   configured. This is because of the ~use-package~ package's ~:ensure~
   flag. That flag tells Emacs to download and install the package if
   it is not already installed. Because of this, the first time you
   start Emacs make take a few seconds as all the packages are
   downloaded and installed. Subsequent starts will not take so long.

* Maintenance
  In order to make maintaining this config easier, I've made the
  ~echosa-export-config~ function which will export the proper
  ~emacs-config.el~ and ~README.org~ files when ~emacs-config.org~ is
  updated and saved.
#+BEGIN_SRC emacs-lisp
  (defun echosa-export-config ()
    (when (string= (buffer-name (current-buffer)) "emacs-config.org")
      (let ((org-file "~/.emacs.d/emacs-config.org")
            (elisp-file "~/.emacs.d/emacs-config.el")
            (readme-file "~/.emacs.d/README.org"))
        (org-babel-tangle-file org-file elisp-file "emacs-lisp")
        (copy-file org-file readme-file t)
        (message "Config export complete!"))))
  (add-hook 'after-save-hook 'echosa-export-config)
#+END_SRC
* Packages
  External and third-party packages are great. They make adding new things to
  Emacs much nicer and less complicated.

** Repositories
   We need to set up the package repositories for Emacs' own package manager.
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC

* General Setup
#+BEGIN_SRC emacs-lisp
  (temp-buffer-resize-mode 0)
  (add-hook 'before-save-hook 'time-stamp)
  (setq fill-column 80)
  (setq scroll-conservatively 101)
  (setq case-fold-search t)
  (setq case-replace t)
  (setq display-buffer-reuse-frames t)
  (setq display-time-24hr-format nil)
  (setq display-time-day-and-date t)
  (setq large-file-warning-threshold nil)
  (setq truncate-partial-width-windows nil)
#+END_SRC
  Allow ~a~ to be used in dired to reuse the buffer instead of creating new buffers for every
  directory.
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
  Don't load outdated complied files.
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
  Make sure Emacs can find and run commands on the PATH. The
  ~exec-path-from-shell~ package is SLOW. Disabling and manually
  setting paths for now.
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns x))
    (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
    (setq exec-path (append '("/usr/local/bin") exec-path)))

  (use-package exec-path-from-shell
    :disabled t
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC
* Uniquify
  If I have two buffers open with two files that have the same name, (e.g. two
  different README files from two different projects), Emacs will, by default,
  name the buffers ~README~ and ~README<1>~. This is useless. Therefore, I turn on
  uniquify and use it to name buffers wtih the same file name based on their
  parent directories: ~README<projdir1>~ and ~README<projectdir2>~.
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :defer t
    :config
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))
#+END_SRC
* Ido
#+BEGIN_SRC emacs-lisp
  (use-package icomplete
    :ensure t
    :config
    (icomplete-mode))
  (use-package ido
    :ensure t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (setq ido-enable-flex-matching t)
    ;; disable ido faces to see flx highlights.
    (setq ido-use-faces nil))
  (use-package flx-ido
    :ensure t
    :after (ido)
    :config
    (flx-ido-mode 1))
  (use-package ido-vertical-mode
    :ensure t
    :after (ido)
    :config
    (ido-vertical-mode 1))
#+END_SRC

* Evil
  Call me heathen if you wish, but I prefer Vim navigation keys. Also,
  I want Ido buffer switching and file finding when using Vim's ~:b~ and ~:e~.

  [[https://gitorious.org/evil/pages/Home][Evil website]]
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :after (key-chord)
    :config
    (setq evil-default-cursor '(t))
    (evil-mode 1)
    (define-key evil-ex-map "b " 'ido-switch-buffer)
    (define-key evil-ex-map "e " 'ido-find-file)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
    (key-chord-define evil-motion-state-map "jk" 'evil-normal-state)
    (key-chord-define evil-visual-state-map "jk" 'evil-normal-state)
    (key-chord-define evil-emacs-state-map "jk" 'evil-normal-state))
#+END_SRC
  Using ~key-chord-mode~, I have the vim equivalent of ~imap jk <Esc>~, which
  allows me to use ~jk~ instead of ~Esc~ to get out of insert mode.
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))
#+END_SRC
  To make things even easier, I set up a "leader key" of ~Space~, so that I can
  type ~Space <letter>~ to run a command. For instance, ~Space x~ instead of
  ~M-x~ to execute commands.
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :after (evil)
    :config
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key "x" 'execute-extended-command)
    (evil-leader/set-key ":" 'eval-expression)
    (evil-leader/set-key "k" 'ido-kill-buffer)
    (evil-leader/set-key "p" 'projectile-commander)
    (evil-leader/set-key "d" 'dired)
    (evil-leader/set-key "e" 'er/expand-region)
    (evil-leader/set-key "m" 'mc/mark-more-like-this-extended)
    (evil-leader/set-key "s" 'string-inflection-toggle)
    (global-evil-leader-mode))
#+END_SRC
  Let's make sure we have "surround" support.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC
  Finally, there are some modes that I want to always be in Emacs mode instead
  of Evil.

  Major modes:
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-modes
        '(archive-mode bbdb-mode bookmark-bmenu-mode bookmark-edit-annotation-mode browse-kill-ring-mode bzr-annotate-mode calc-mode cfw:calendar-mode completion-list-mode Custom-mode debugger-mode delicious-search-mode desktop-menu-blist-mode desktop-menu-mode doc-view-mode dvc-bookmarks-mode dvc-diff-mode dvc-info-buffer-mode dvc-log-buffer-mode dvc-revlist-mode dvc-revlog-mode dvc-status-mode dvc-tips-mode ediff-mode ediff-meta-mode efs-mode Electric-buffer-menu-mode emms-browser-mode emms-mark-mode emms-metaplaylist-mode emms-playlist-mode etags-select-mode fj-mode gc-issues-mode gdb-breakpoints-mode gdb-disassembly-mode gdb-frames-mode gdb-locals-mode gdb-memory-mode gdb-registers-mode gdb-threads-mode gist-list-mode git-rebase-mode gnus-article-mode gnus-browse-mode gnus-group-mode gnus-server-mode gnus-summary-mode google-maps-static-mode ibuffer-mode jde-javadoc-checker-report-mode magit-popup-mode magit-popup-sequence-mode magit-commit-mode magit-revision-mode magit-diff-mode magit-key-mode magit-log-mode magit-mode magit-reflog-mode magit-show-branches-mode magit-branch-manager-mode magit-stash-mode magit-status-mode magit-wazzup-mode magit-refs-mode mh-folder-mode monky-mode mu4e-main-mode mu4e-headers-mode mu4e-view-mode notmuch-hello-mode notmuch-search-mode notmuch-show-mode occur-mode org-agenda-mode package-menu-mode proced-mode rcirc-mode rebase-mode recentf-dialog-mode reftex-select-bib-mode reftex-select-label-mode reftex-toc-mode sldb-mode slime-inspector-mode slime-thread-control-mode slime-xref-mode sr-buttons-mode sr-mode sr-tree-mode sr-virtual-mode tar-mode tetris-mode tla-annotate-mode tla-archive-list-mode tla-bconfig-mode tla-bookmarks-mode tla-branch-list-mode tla-browse-mode tla-category-list-mode tla-changelog-mode tla-follow-symlinks-mode tla-inventory-file-mode tla-inventory-mode tla-lint-mode tla-logs-mode tla-revision-list-mode tla-revlog-mode tla-tree-lint-mode tla-version-list-mode twittering-mode urlview-mode vc-annotate-mode vc-dir-mode vc-git-log-view-mode vc-svn-log-view-mode vm-mode vm-summary-mode w3m-mode wab-compilation-mode xgit-annotate-mode xgit-changelog-mode xgit-diff-mode xgit-revlog-mode xhg-annotate-mode xhg-log-mode xhg-mode xhg-mq-mode xhg-mq-sub-mode xhg-status-extra-mode cider-repl-mode emacsagist-mode elfeed-show-mode elfeed-search-mode notmuch-tree term-mode))
#+END_SRC

  Minor modes:
#+BEGIN_SRC emacs-lisp
  (add-hook 'geben-mode-hook 'evil-emacs-state)
#+END_SRC
* Winner-mode
  Winner-mode makes it really easy to handle window changes in
  Emacs. =C-c left-arrow= goes back to the previous window
  configuration (undo), and =C-c right-arrow= goes forward
  (redo). This is especially helpful for when a popop window ruins
  your layout. Simply =C-c left-arrow= to get back to where you were.
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :defer 5
    :config
    (winner-mode 1))
#+END_SRC

* pbcopy
  Clipboard sharing. Copy in Emacs, paste in OS X, and vice versa.

  [[https://github.com/jkp/pbcopy.el][pbcopy source]]
#+BEGIN_SRC emacs-lisp
  (use-package pbcopy
    :ensure t
    :defer t
    :config
    (turn-on-pbcopy))
#+END_SRC

* Minibuffer
  This little snippet adds eldoc support to the minibuffer. Requires Emacs 24.4.
  [[http://endlessparentheses.com/sweet-new-features-in-24-4.html][Found on EndlessParenthesis.com.]]
#+BEGIN_SRC emacs-lisp
  (add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+END_SRC

* Programming
** General
   Indent with 4 spaces, not a tabstop.
#+BEGIN_SRC emacs-lisp
  (setq c-basic-offset 4)
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
#+END_SRC
** Git
   Magit is awesome.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+END_SRC
** Projectile
  Projectile is, quite simply and objectively, the shit. There's no other way to
  put it.

  [[https://github.com/bbatsov/projectile][Projectile on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer 5
    :config
    (projectile-global-mode))
#+END_SRC
** Paredit
  If you write any form of Lisp and don't use paredit, change that.

  [[http://mumble.net/~campbell/emacs/paredit.el][Paredit website]]

  [[http://emacsrocks.com/e14.html][Emacs Rocks episode on paredit]]
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :defer t
    :hook ((emacs-lisp-mode clojure-mode) . paredit-mode))
#+END_SRC
** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (defun my-emacs-lisp-mode-hook ()
    (eldoc-mode)
    (linum-mode))
  (add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)
#+END_SRC
** PHP
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :mode "\\.php\\'")
  (use-package ac-php
    :ensure t
    :init
    (add-hook 'php-mode-hook
              '(lambda ()
                 (auto-complete-mode t)
                 (setq ac-sources '(ac-source-php))
                 (yas-global-mode 1)
                 (ac-php-core-eldoc-setup)
                 (define-key php-mode-map  (kbd "C-]") 'ac-php-find-symbol-at-point)
                 (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back))))
  (require 'cl) ;; php-cs-fixer
  (use-package php-cs-fixer
    :ensure t
    :config
    (add-hook 'before-save-hook 'php-cs-fixer-before-save))
#+END_SRC
** JavaScript
  The built-in JS support in Emacs is lacking.
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer t
    :mode "\\.js\\'")

  (use-package json-mode
    :ensure t
    :defer t
    :mode "\\.json\\'")
#+END_SRC
** Syntax checking
   [[http://www.flycheck.org][FlyCheck]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
  (defun my-org-mode-hook ()
    (auto-fill-mode))
  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+END_SRC
* Music
  [[https://www.gnu.org/software/emms/][EMMS]]
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :defer t
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players))
#+END_SRC
* Miscellaneous Functions
#+BEGIN_SRC emacs-lisp
  ;; http://www.emacswiki.org/emacs/ToggleWindowSplit
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
  (define-key ctl-x-4-map "t" 'toggle-window-split)
#+END_SRC
* Regular Expressions
#+BEGIN_SRC emacs-lisp
  (defun reb-query-replace-this-regxp (replace)
    "Uses the regexp built with re-builder to query the target buffer.
  This function must be run from within the re-builder buffer, not the target
  buffer.

  Argument REPLACE String used to replace the matched strings in the buffer.
   Subexpression references can be used (\1, \2, etc)."
    (interactive "sReplace with: ")
    (if (eq major-mode 'reb-mode)
        (let ((reg (reb-read-regexp)))
          (select-window reb-target-window)
          (save-excursion
            (beginning-of-buffer)
            (query-replace-regexp reg replace)))
      (message "Not in a re-builder buffer!")))
  (setq reb-mode-hook
        '((lambda nil
            (define-key reb-mode-map "\245" 'reb-query-replace-this-regxp))))
#+END_SRC

* Theme
  Here, I keep a list of several theme setups, wrapped up in a
  conditional (the ~(cond ...)~ function is the emacs lisp equivalent of a
  switch statement). Essentially, all that needs to be done is to
  change the value of ~my-theme~ at the beginning of the ~(let)~, then
  execute (~C-x C-e~) the entire block.
#+BEGIN_SRC emacs-lisp
  (let ((my-theme "solarized-dark"))
    (cond
     ((string= my-theme "solarized-dark")
      (use-package solarized-theme
        :if window-system
        :ensure t
        :config
        (load-theme 'solarized-dark t)))
     ((string= my-theme "tango-dark")
      (load-theme 'tango-dark t))))
#+END_SRC
* Backup and Auto Save
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/.tmp/" nil)))
  (setq auto-save-list-file-prefix "~/.emacs.d/.tmp/.saves-")
  (setq backup-directory-alist '(("" . "~/.emacs.d/.tmp")))
#+END_SRC
* Prettyify Emacs
** Things I don't want to see
*** Scroll bars
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'toggle-scroll-bar) (toggle-scroll-bar nil))
#+END_SRC
*** Tool bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
*** Menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
*** Splash screen
    It's unnecessary, really.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** Things I do want to see
*** Highlight current region/selection
#+BEGIN_SRC emacs-lisp
  (transient-mark-mode t)
#+END_SRC
*** Syntax highlighting
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC
*** Column number
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC
*** Show matching parenthesis
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
*** Blinking cursor
#+BEGIN_SRC emacs-lisp
  (setq blink-cursor-mode t)
#+END_SRC
*** Show empty lines
#+BEGIN_SRC emacs-lisp
  (setq indicate-empty-lines t)
#+END_SRC
*** Highlight the current light
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
*** Line Numbers
  I like line numbers. They help quite a bit with moving around. Here
  I turn on linum-mode globally.
#+BEGIN_SRC emacs-lisp
  (global-linum-mode)
#+END_SRC
  Then I change the way line numbers are
  displayed to be right-justified.
#+BEGIN_SRC emacs-lisp
  (setq linum-format (lambda
                       (line)
                       (propertize
                        (format (concat "%"
                                        (number-to-string
                                         (length
                                          (number-to-string
                                           (line-number-at-pos
                                            (point-max)))))
                                        "d ")
                                line)
                        'face
                        'linum)))
#+END_SRC
* Customizations
Any customizations that are machine specific or do not belong in git
can go in ~custom.el~. This file is ignored from git, and is where all
customizations form ~M-x customize~ are saved.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+END_SRC
