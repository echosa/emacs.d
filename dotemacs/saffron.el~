(add-to-list 'load-path "~/Dropbox/emacs")
(setenv "PATH" (mapconcat 'concat
                          (append '("/usr/local/pear/bin"
                                    "/usr/local/bin"
                                    "/Users/echosa/.carton/bin")
                                  (list (getenv "PATH")))
                          ":"))

(set-face-attribute 'default nil :family "Consolas" :height 120)
(toggle-scroll-bar nil)
(tool-bar-mode -1)
(global-font-lock-mode t)
(transient-mark-mode t)
(show-paren-mode t)
(column-number-mode t)
(temp-buffer-resize-mode 0)
(add-hook 'before-save-hook 'time-stamp)
(menu-bar-mode -1)
(when (and (fboundp 'ns-set-resource)
	   (eq window-system 'ns))
  (ns-set-resource nil "ApplePressAndHoldEnabled" "NO"))
(server-start)

(require 'package)
(package-initialize)

(require 'uniquify)

(require 'ido)
(ido-mode)
(icomplete-mode 99)

;; key chords
(key-chord-mode 1)

(add-to-list 'load-path "~/Dropbox/github/phpplus-mode")
(require 'php+-mode)
(autoload 'php+-mode "php+-mode" nil t)

(require 'pbcopy)
(turn-on-pbcopy)

(require 'paredit)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode)

(add-to-list 'load-path "~/Dropbox/github/ecukes")
(require 'ecukes)

;; *************
;; moving around
;; *************
(defun other-window-backwards ()
  "Move to the previous window."
  (interactive)
  (other-window -1))

(defun delete-to-end-of-buffer (add-to-kill-ring-p)
  "Deletes from point to end of buffer.
If prefix argument is given, kill the region, adding it to the kill ring."
  (interactive "P")
  (if add-to-kill-ring-p
      (kill-region (point) (point-max))
    (delete-region (point) (point-max))))

;; http://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))
(define-key ctl-x-4-map "t" 'toggle-window-split)

;; **********
;; re-buidler
;; **********
(defun reb-query-replace-this-regxp (replace)
  "Uses the regexp built with re-builder to query the target buffer.
This function must be run from within the re-builder buffer, not the target
buffer.

Argument REPLACE String used to replace the matched strings in the buffer.
 Subexpression references can be used (\1, \2, etc)."
  (interactive "sReplace with: ")
  (if (eq major-mode 'reb-mode)
      (let ((reg (reb-read-regexp)))
        (select-window reb-target-window)
        (save-excursion
          (beginning-of-buffer)
          (query-replace-regexp reg replace)))
    (message "Not in a re-builder buffer!")))

;; ****
;; php+
;; ****
(defun my-php+-mode-hook ()
  (make-local-variable (quote whitespace-style))
  (setf whitespace-style (quote (face lines-tail tab-mark)))
  (whitespace-mode t)
  (subword-mode 1))

;; *********
;; java-mode
;; *********
(defun my-java-mode-hook ()
  (make-local-variable (quote whitespace-style))
  (setf whitespace-style (quote (face lines-tail tab-mark)))
  (whitespace-mode t)
  (subword-mode 1))

;; **************
;; Tip of the Day
;; **************
(require 'cl)
(defun totd ()
  (interactive)
  (with-output-to-temp-buffer "*Tip of the day*"
    (let* ((commands (loop for s being the symbols
                           when (commandp s) collect s))
           (command (nth (random (length commands)) commands)))
      (princ
       (concat "Your tip for the day is:\n========================\n\n"
               (with-temp-buffer
                 (describe-function-1 command)
                 (buffer-string))
               "\n\nInvoke with:\n\n"
               (with-temp-buffer
                 (where-is command t)
                 (buffer-string)))))))

(global-set-key "\C-ck" 'comment-region)
(global-set-key "\C-cu" 'uncomment-region)
(global-set-key "\M-n" 'scroll-up-line)
(global-set-key "\M-p" 'scroll-down-line)
(global-set-key "\C-xO" 'other-window-backwards)
(global-set-key "\C-x9" 'delete-other-windows-vertically)
(global-set-key "\M-D" 'delete-to-end-of-buffer)
(global-set-key "\C-x\M-r" 'remember)
(global-set-key "\M-@" 'er/expand-region)
(global-set-key "\C-x\C-b" 'ibuffer)
(global-set-key "\C-c\C-j" 'ace-jump-mode)
(global-set-key (kbd "C-|") 'move-to-column)
(global-set-key "\M-/" 'hippie-expand)
(global-set-key "\C-c\C-k" 'kill-lines)
(global-set-key "\C-cm" 'mc/mark-more-like-this-extended)
(global-set-key "\C-cv" 'eval-buffer)
(define-key reb-mode-map "\C-c\M-%" 'reb-query-replace-this-regxp)

(load-file "~/quicklisp/slime-helper.el")
(setq slime-net-coding-system 'utf-8-unix)
(when window-system (load-theme 'solarized-dark t))
(wrap-region-global-mode)
(add-hook 'java-mode-hook 'my-java-mode-hook)
(add-hook 'sgml-mode-hook 'zencoding-mode)
(add-to-list 'auto-mode-alist '("\\.phtml$" . web-mode))
(setq web-mode-autocompletes-flag t)
(setq inferior-lisp-program "sbcl")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-use-menu-map t)
 '(auth-sources (quote ((:source "~/.authinfo.gpg" :host t :protocol nil))))
 '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.tmp/" nil) ("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/var/folders/vO/vOsSP+j+Fxyyk9m8oLzG1E+++TM/-Tmp-/\\2" t))))
 '(auto-save-list-file-prefix "~/.emacs.tmp/.saves-")
 '(backup-directory-alist (quote (("" . "~/.emacs.tmp"))))
 '(blink-cursor-mode t)
 '(c-basic-offset 4)
 '(case-fold-search t)
 '(case-replace t)
 '(compilation-error-regexp-alist nil)
 '(display-buffer-reuse-frames t)
 '(display-time-24hr-format nil)
 '(display-time-day-and-date t)
 '(dun-log-file "~/Dropbox/emacs/dunnet.score")
 '(erc-nick "echosa")
 '(erc-user-full-name "Echosa")
 '(exec-path (quote ("/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin" "/Users/echosa/.carton/bin")))
 '(fill-column 80)
 '(gud-gdb-command-name "gdb --annotate=1")
 '(ido-completion-buffer "*Ido Completions*")
 '(ido-completion-buffer-all-completions t)
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(indent-tabs-mode nil)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(ispell-program-name "/usr/local/bin/aspell")
 '(large-file-warning-threshold nil)
 '(linum-format (lambda (line) (propertize (format (concat "%" (number-to-string (length (number-to-string (line-number-at-pos (point-max))))) "d ") line) (quote face) (quote linum))))
 '(message-kill-buffer-on-exit t)
 '(message-log-max 5000)
 '(message-send-mail-function (quote message-send-mail-with-sendmail))
 '(ns-alternate-modifier (quote meta))
 '(ns-antialias-text t)
 '(ns-command-modifier (quote super))
 '(ns-control-modifier (quote control))
 '(ns-function-modifier (quote none))
 '(ns-pop-up-frames nil)
 '(ns-use-qd-smoothing nil)
 '(org-agenda-compact-blocks nil)
 '(org-agenda-restore-windows-after-quit t)
 '(org-agenda-show-all-dates nil)
 '(org-agenda-start-on-weekday nil)
 '(org-agenda-window-setup (quote current-window))
 '(org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame) (gnus . gnus-other-frame) (file . find-file))))
 '(org-log-done (quote note))
 '(org-log-into-drawer t)
 '(org-timeline-show-empty-dates nil)
 '(org-todo-keywords (quote ((sequence "TODO(t)" "IN PROGRESS(i!)" "|" "DONE(d@/!)") (sequence "ON HOLD(h!)" "|" "CANCELLED(c@/!)"))))
 '(package-archives (quote (("gnu" . "http://elpa.gnu.org/packages/") ("marmalade" . "http://marmalade-repo.org/packages/") ("melpa" . "http://melpa.milkbox.net/packages/"))))
 '(package-to-carton/carton-file "~/Dropbox/emacs/Carton")
 '(php+-flymake-enable t)
 '(php+-flymake-tests (quote (lint phpcs phpmd)))
 '(php+-mode-css-compile-on-save t)
 '(php+-mode-delete-trailing-whitespace t)
 '(php+-mode-hook (quote (my-php+-mode-hook)))
 '(php+-mode-js-compile-on-save t)
 '(php+-mode-php-compile-on-save nil)
 '(php+-mode-show-project-in-modeline t)
 '(php+-mode-show-trailing-whitespace t)
 '(php-auto-fill t)
 '(php-blank-line-at-end-of-class t)
 '(php-doc-default-author (quote ("Brian Zwahr" . "echosa@gmail.com")))
 '(php-doc-default-php-version "5.4")
 '(php-file-patterns (quote ("\\.php[s34]?\\'" "\\.inc\\'")))
 '(php-format-align-array-double-arrows nil)
 '(php-format-break-all-method-call-arguments nil)
 '(php-format-break-all-method-chain-links t)
 '(php-hide-show-hide-doc-blocks t)
 '(php-hide-show-ignore-extensions (quote (".phtml")))
 '(php-parse-send-to-front (quote (("__construct" nil method public) ("init" nil method public) ("setUp" nil method public) ("tearDown" nil property public))))
 '(php-tag-arguments (quote ("--PHP-kinds=+cf" "--regex-PHP='/abstract class ([^ ]*)//c/'" "--regex-PHP='/interface ([^ ]*)//c/'" "--regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)//f/'")))
 '(php-tag-shell-command "/opt/local/bin/ctags")
 '(php-tags-relative t)
 '(php-test-ask-save nil)
 '(php-test-compile-tests (quote (lint phpcs phpmd)))
 '(php-test-file-extensions (quote ("php" "inc" "phtml")))
 '(php-test-show-command nil)
 '(phpcs-shell-command "/usr/local/pear/bin/phpcs")
 '(phpcs-standard "PSR2")
 '(phpmd-rulesets (quote (codesize design naming unusedcode)))
 '(phpmd-shell-command "/usr/local/pear/bin/phpmd")
 '(phpunit-shell-command "/usr/local/pear/bin/phpunit")
 '(remember-data-file "~/Dropbox/emacs/notes")
 '(safe-local-variable-values (quote ((eval when (and (buffer-file-name) (file-regular-p (buffer-file-name)) (string-match-p "^[^.]" (buffer-file-name))) (emacs-lisp-mode) (unless (featurep (quote package-build)) (let ((load-path (cons ".." load-path))) (require (quote package-build)))) (package-build-minor-mode)))))
 '(scroll-conservatively 10000)
 '(semantic-completion-displayor-format-tag-function (quote semantic-format-tag-prototype))
 '(semantic-decoration-styles (quote (("semantic-decoration-on-includes" . t) ("semantic-tag-boundary" . t))))
 '(semantic-inhibit-functions (quote ((lambda nil (not (equal major-mode (quote java-mode)))))))
 '(semantic-java-dependency-system-include-path (quote ("/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/Contents/Home/src")))
 '(semanticdb-javap-classpath (quote ("/Users/echosa/.m2/repository/java3d/vecmath/1.3.1/vecmath-1.3.1.jar" "/Users/echosa/.m2/repository/junit/junit/4.10/junit-4.10.jar" "/Users/echosa/.m2/repository/net/java/jinput/jinput/2.0.5/jinput-2.0.5.jar" "/Users/echosa/.m2/repository/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-linux.jar" "/Users/echosa/.m2/repository/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-osx.jar" "/Users/echosa/.m2/repository/net/java/jinput/jinput-platform/2.0.5/jinput-platform-2.0.5-natives-windows.jar" "/Users/echosa/.m2/repository/net/java/jutils/jutils/1.0.0/jutils-1.0.0.jar" "/Users/echosa/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar" "/Users/echosa/.m2/repository/org/lwjgl/lwjgl/lwjgl/2.8.5/lwjgl-2.8.5.jar" "/Users/echosa/.m2/repository/org/lwjgl/lwjgl/lwjgl-platform/2.8.5/lwjgl-platform-2.8.5-natives-linux.jar" "/Users/echosa/.m2/repository/org/lwjgl/lwjgl/lwjgl-platform/2.8.5/lwjgl-platform-2.8.5-natives-osx.jar" "/Users/echosa/.m2/repository/org/lwjgl/lwjgl/lwjgl-platform/2.8.5/lwjgl-platform-2.8.5-natives-windows.jar")))
 '(semanticdb-project-roots (quote ("~/dev/javagame/mygame/")))
 '(send-mail-function (quote sendmail-send-it))
 '(server-port nil)
 '(solarized-italic t)
 '(solarized-termcolors 256)
 '(tab-always-indent (quote complete))
 '(tab-width 4)
 '(tag-shell-command "/usr/local/bin/ctags")
 '(term-scroll-show-maximum-output nil)
 '(term-scroll-to-bottom-on-output t)
 '(tramp-default-method "ssh")
 '(trash-directory "~/.Trash")
 '(truncate-partial-width-windows nil)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(vimgolf-key "2ccc64006e5b916b14d5fde44bd3dca4")
 '(winner-mode t nil (winner))
 '(woman-use-own-frame nil t)
 '(zf-use-hyphens-in-viewscript-urls t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(semantic-decoration-on-fileless-includes ((t (:background "#005000")))))
(put 'dired-find-alternate-file 'disabled nil)
