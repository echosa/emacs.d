#+TITLE: Echosa's Emacs Configuration
#+OPTIONS: toc:4 h:4
* Introduction
  Inspired by [[http://sachachua.com/blog/2012/06/literate-programming-emacs-configuration-file/][Sacha Chua]], I have moved my Emacs configuration into an
  organized and descriptive [[http://orgmode.org][org-mode]] file. What you are reading now
  is, in fact, my Emacs configuration file.

  Well, sort of.

  With org-mode, I can export the information to a number of
  formats. That means you could be reading this directly from the .org
  file itself, from a markdown file (like the [[https://github.com/echosa/emacs.d/blob/master/README.md][README]] on my Emacs
  configuration GitHub repo), or from an HTML file somewhere on the
  web.

  How this works is based around a part of org-mode called
  org-babel. org-babel allows org-mode to execute code that is
  embedded into a .org file. If you look at the [[https://github.com/echosa/emacs.d/blob/master/dotemacs.el][actual .emacs file]]
  that my Emacs loads, you'll see that all it does is load the .org
  file containing my configuration (the one you're reading now) and
  parse it through org-babel to execute only the blocks of elisp that
  make up the actual configuration, while ignoring the extra
  documetation and narrative, like this introdution section.

  If you're wondering about performance, org-babel doesn't do this
  parse every time I open Emacs. Instead, it sees that I'm trying to
  load `emacs-config.org` and checks for the existence of
  `emacs-config.el`. If it doesn't find that file, or finds an out of
  date version, only then does it parse the .org file to create a new
  .el file. This means there's a bit of a slow startup the first time
  after the org-mode file is changes, but after that there's no
  noticable change in performance (at least on my machine).
  
  Anyway, what follows is my actual Emacs configuration, embedded into
  a descriptive narrative.

* Packages
  External and third-party packages are great. They make adding new things to
  Emacs much nicer and less complicated.
** Cask
  Cask is a dependency manager for Emacs, similar to npm for Node.

  [[http://cask.github.io][Cask website]]
#+begin_src emacs-lisp
(require 'cask "~/.cask/cask.el")
(cask-initialize)
#+end_src
** Pallet
  Pallet keeps your Cask file up-to-date when you install packages through
  Emacs's package manager.

  [[https://github.com/rdallasgray/pallet][Pallet website]]
#+begin_src emacs-lisp
(require 'pallet)
(pallet-mode t)
#+end_src
** Package.el
   Also, we need to set up the package repositories for Emacs' own package
   manager.
#+begin_src emacs-lisp
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
#+end_src
* General Setup
#+begin_src
(temp-buffer-resize-mode 0)
(add-hook 'before-save-hook 'time-stamp)
(setq fill-column 80)
(setq scroll-conservatively 101)
(setq case-fold-search t)
(setq case-replace t)
(setq display-buffer-reuse-frames t)
(setq display-time-24hr-format nil)
(setq display-time-day-and-date t)
(setq large-file-warning-threshold nil)
(setq truncate-partial-width-windows nil)
#+end_src
  Allow `a` to be used in dired to reuse the buffer instead of creating new buffers for every
  directory.
#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src
  Don't load outdated complied files.
#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src
* Uniquify
  If I have two buffers open with two files that have the same name, (e.g. two 
  different README files from two different projects), Emacs will, by default, 
  name the buffers `README` and `README<1>`. This is useless. Therefore, I turn on 
  uniquify and use it to name buffers wtih the same file name based on their 
  parent directories: `README<projdir1>` and `README<projectdir2>`.
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
* Ido
  Ido makes minibuffer completions much nicer, easier, and faster.
#+begin_src emacs-lisp
(require 'ido)
(ido-mode)
(setq ido-completion-buffer "*Ido Completions*")
(setq ido-completion-buffer-all-completions t)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(icomplete-mode 99)
(ido-vertical-mode 1)
(flx-ido-mode 1)
#+end_src
* Evil
  Call me heathen if you wish, but I prefer Vim navigation keys.

  [[https://gitorious.org/evil/pages/Home][Evil website]]
#+begin_src emacs-lisp
(evil-mode 1)
(setq evil-default-cursor '(t))
#+end_src
  Using `key-chord-mode`, I have the vim equivalent of `imap jk <Esc>`, which 
  allows me to to `jk` instead of `Esc` to get out of insert mode.
#+begin_src emacs-lisp
(key-chord-mode 1)
(key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
(key-chord-define evil-motion-state-map "jk" 'evil-normal-state)
(key-chord-define evil-visual-state-map "jk" 'evil-normal-state)
(key-chord-define evil-emacs-state-map "jk" 'evil-normal-state)
#+end_src
  I want Ido buffer switching and file finding when using Vim's `:b` and `:e`.
#+begin_src emacs-lisp
(define-key evil-ex-map "b " 'ido-switch-buffer)
(define-key evil-ex-map "e " 'ido-find-file)
#+end_src
  I also want Vim's `vs` command for surrounding text with quotes, braces, etc.
#+begin_src emacs-lisp
(require 'surround)
(global-surround-mode 1)
#+end_src
  To make things even easier, I set up a "leader key" of `Space`, so that I can
  type `Space <letter>` to run a command. For instance, `Space x` instead of
  `M-x` to execute commands.
#+begin_src emacs-lisp
(require 'evil-leader)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key "x" 'execute-extended-command)
(evil-leader/set-key ":" 'eval-expression)
(evil-leader/set-key "k" 'ido-kill-buffer)
(evil-leader/set-key "p" 'projectile-commander)
(evil-leader/set-key "d" 'dired)
(evil-leader/set-key "e" 'er/expand-region)
(evil-leader/set-key "m" 'mc/mark-more-like-this-extended)
(evil-leader/set-key "s" 'string-inflection-toggle)
(global-evil-leader-mode)
#+end_src
  Finally, there are some modes that I want to always be in Emacs mode instead
  of Evil.
#+begin_src emacs-lisp
(setq evil-emacs-state-modes
      '(archive-mode bbdb-mode bookmark-bmenu-mode bookmark-edit-annotation-mode browse-kill-ring-mode bzr-annotate-mode calc-mode cfw:calendar-mode completion-list-mode Custom-mode debugger-mode delicious-search-mode desktop-menu-blist-mode desktop-menu-mode doc-view-mode dvc-bookmarks-mode dvc-diff-mode dvc-info-buffer-mode dvc-log-buffer-mode dvc-revlist-mode dvc-revlog-mode dvc-status-mode dvc-tips-mode ediff-mode ediff-meta-mode efs-mode Electric-buffer-menu-mode emms-browser-mode emms-mark-mode emms-metaplaylist-mode emms-playlist-mode etags-select-mode fj-mode gc-issues-mode gdb-breakpoints-mode gdb-disassembly-mode gdb-frames-mode gdb-locals-mode gdb-memory-mode gdb-registers-mode gdb-threads-mode geben-mode gist-list-mode git-rebase-mode gnus-article-mode gnus-browse-mode gnus-group-mode gnus-server-mode gnus-summary-mode google-maps-static-mode ibuffer-mode jde-javadoc-checker-report-mode magit-popup-mode magit-popup-sequence-mode magit-commit-mode magit-revision-mode magit-diff-mode magit-key-mode magit-log-mode magit-mode magit-reflog-mode magit-show-branches-mode magit-branch-manager-mode magit-stash-mode magit-status-mode magit-wazzup-mode magit-refs-mode mh-folder-mode monky-mode mu4e-main-mode mu4e-headers-mode mu4e-view-mode notmuch-hello-mode notmuch-search-mode notmuch-show-mode occur-mode org-agenda-mode package-menu-mode proced-mode rcirc-mode rebase-mode recentf-dialog-mode reftex-select-bib-mode reftex-select-label-mode reftex-toc-mode sldb-mode slime-inspector-mode slime-thread-control-mode slime-xref-mode sr-buttons-mode sr-mode sr-tree-mode sr-virtual-mode tar-mode tetris-mode tla-annotate-mode tla-archive-list-mode tla-bconfig-mode tla-bookmarks-mode tla-branch-list-mode tla-browse-mode tla-category-list-mode tla-changelog-mode tla-follow-symlinks-mode tla-inventory-file-mode tla-inventory-mode tla-lint-mode tla-logs-mode tla-revision-list-mode tla-revlog-mode tla-tree-lint-mode tla-version-list-mode twittering-mode urlview-mode vc-annotate-mode vc-dir-mode vc-git-log-view-mode vc-svn-log-view-mode vm-mode vm-summary-mode w3m-mode wab-compilation-mode xgit-annotate-mode xgit-changelog-mode xgit-diff-mode xgit-revlog-mode xhg-annotate-mode xhg-log-mode xhg-mode xhg-mq-mode xhg-mq-sub-mode xhg-status-extra-mode cider-repl-mode emacsagist-mode elfeed-show-mode elfeed-search-mode notmuch-tree term-mode))
#+end_src
* Line Numbers
  I like line numbers. They help quite a bit with moving around. Here
  I turn on linum-mode globally.
#+begin_src emacs-lisp
(global-linum-mode)
#+end_src
  Then I change the way line numbers are
  displayed to be right-justified.
#+begin_src emacs-lisp
(setq linum-format (lambda
                     (line)
                     (propertize
                      (format (concat "%"
                                      (number-to-string
                                       (length
                                        (number-to-string
                                         (line-number-at-pos
                                          (point-max)))))
                                      "d ")
                              line)
                      'face
                      'linum)))
#+end_src
* Winner-mode
  Winner-mode makes it really easy to handle window changes in
  Emacs. =C-c left-arrow= goes back to the previous window
  configuration (undo), and =C-c right-arrow= goes forward
  (redo). This is especially helpful for when a popop window ruins
  your layout. Simply =C-c left-arrow= to get back to where you were.
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

* pbcopy
  Clipboard sharing. Copy in Emacs, paste in OS X, and vice versa.

  [[https://github.com/jkp/pbcopy.el][pbcopy source]]
#+begin_src emacs-lisp
(require 'pbcopy)
(turn-on-pbcopy)
#+end_src

* Minibuffer
  This little snippet adds eldoc support to the minibuffer. Requires Emacs 24.4.
  [[http://endlessparentheses.com/sweet-new-features-in-24-4.html][Found on EndlessParenthesis.com.]]
#+begin_src emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook #'eldoc-mode)
#+end_src

* Programming
** General
   Indent with 4 spaces, not a tabstop.
#+begin_src emacs-lisp
(setq c-basic-offset 4)
(setq tab-width 4)
(setq indent-tabs-mode nil)
#+end_src
** Git
   Magit is awesome.
#+begin_src emacs-lisp
(require 'magit)
(setq magit-server-window-for-commit 'pop-to-buffer)
(setq magit-use-overlays nil)
#+end_src
** Projectile
  Projectile is, quite simply and objectively, the shit. There's no other way to
  put it.

  [[https://github.com/bbatsov/projectile][Projectile on Github]]
#+begin_src emacs-lisp
(projectile-global-mode)
#+end_src
** Paredit
  If you write any form of Lisp and don't use paredit, change that. 

  [[http://mumble.net/~campbell/emacs/paredit.el][Paredit website]]

  [[http://emacsrocks.com/e14.html][Emacs Rocks episode on paredit]]
#+begin_src emacs-lisp
(require 'paredit)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
(add-hook 'clojure-mode-hook 'paredit-mode)
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
(defun my-emacs-lisp-mode-hook ()
  (eldoc-mode)
  (linum-mode))
(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-mode-hook)
#+end_src
** Clojure
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'linum-mode)
(defun my-clojure-mode-hook ()
  (clj-refactor-mode 1)
  (yas-minor-mode 1)
  (cljr-add-keybindings-with-prefix "C-c C-m"))
(add-hook 'clojure-mode-hook 'my-clojure-mode-hook)
(require 'ac-cider)
(add-hook 'cider-mode-hook 'ac-flyspell-workaround)
(add-hook 'cider-mode-hook 'ac-cider-setup)
(add-hook 'cider-repl-mode-hook 'ac-cider-setup)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'cider-mode))
#+end_src
** Javascript
  Prefer js2-mode to javascript-mode.
#+begin_src emacs-lisp
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+end_src
** PHP
#+begin_src emacs-lisp
(require 'cl)
(defun my-php-mode-hook ()
  (make-local-variable (quote whitespace-style))
  (setf whitespace-style (quote (face lines-tail tab-mark)))
  (whitespace-mode t)
  (linum-mode 1)
  (subword-mode 1)
  (php-enable-symfony2-coding-style))
#+end_src
** HTML
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
(setq web-mode-autocompletes-flag t)
(autoload 'zencoding-mode "zencoding-mode" nil t)
(add-hook 'web-mode-hook 'zencoding-mode)
(add-hook 'twig-mode-hook 'zencoding-mode)
#+end_src
* Compilation
  `M-x compile` has some issues with ansi color codes. This fixes
  it. Found at [[http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer][StackOverflow]]. 
#+begin_src emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

* IRC
#+begin_src emacs-lisp
(setq erc-nick "echosa")
(setq erc-user-full-name "Echosa")
#+end_src

* WWW
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

* Email
#+begin_src emacs-lisp
(setq send-mail-function 'smtpmail-send-it)
#+end_src

* Terminals
#+begin_src emacs-lisp
(setq term-scroll-show-maximum-output nil)
(setq term-scroll-to-bottom-on-output t)
#+end_src

* Man Pages
#+begin_src emacs-lisp
(setq woman-use-own-frame nil)
#+end_src

* Miscellaneous Functions
#+begin_src emacs-lisp
;; http://www.emacswiki.org/emacs/ToggleWindowSplit
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
(define-key ctl-x-4-map "t" 'toggle-window-split)
#+end_src
* Regular Expressions
#+begin_src emacs-lisp
(defun reb-query-replace-this-regxp (replace)
  "Uses the regexp built with re-builder to query the target buffer.
This function must be run from within the re-builder buffer, not the target
buffer.

Argument REPLACE String used to replace the matched strings in the buffer.
 Subexpression references can be used (\1, \2, etc)."
  (interactive "sReplace with: ")
  (if (eq major-mode 'reb-mode)
      (let ((reg (reb-read-regexp)))
        (select-window reb-target-window)
        (save-excursion
          (beginning-of-buffer)
          (query-replace-regexp reg replace)))
    (message "Not in a re-builder buffer!")))
(setq reb-mode-hook
      '((lambda nil
          (define-key reb-mode-map "\245" 'reb-query-replace-this-regxp))))
#+end_src

* Key Bindings
#+begin_src emacs-lisp
(global-set-key "\M-n" 'scroll-up-line)
(global-set-key "\M-p" 'scroll-down-line)
(global-set-key "\C-x9" 'delete-other-windows-vertically)
(global-set-key "\M-@" 'er/expand-region)
(global-set-key "\C-cm" 'mc/mark-more-like-this-extended)
#+end_src
* Theme
  Solarized Dark is where it's at.
#+begin_src emacs-lisp
(when window-system (load-theme 'solarized-dark t))
#+end_src
  Trust all themes.
#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src
* Backup and Auto Save
#+begin_src emacs-lisp
(setq auto-save-file-name-transforms '((".*" "~/.emacs.tmp/" nil)))
(setq auto-save-list-file-prefix "~/.emacs.tmp/.saves-")
(setq backup-directory-alist '(("" . "~/.emacs.tmp")))
#+end_src
* Prettyify Emacs
** Things I don't want to see
*** Scroll bars
#+begin_src emacs-lisp
(when (fboundp 'toggle-scroll-bar) (toggle-scroll-bar nil))
#+end_src
*** Tool bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
*** Menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
*** Splash screen
    It's unnecessary, really.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
** Things I do want to see
*** Highlight current region/selection
#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src
*** Syntax highlighting
#+begin_src emacs-lisp
(global-font-lock-mode t)
#+end_src
*** Column number
#+begin_src emacs-lisp
(column-number-mode t)
#+end_src
*** Show matching parenthesis
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src
*** Blinking cursor
#+begin_src emacs-lisp
(setq blink-cursor-mode t)
#+end_src
*** Visual bell 
    This blinks the screen when ever an error would normally make a sound.
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src
*** Show empty lines
#+begin_src emacs-lisp
(setq indicate-empty-lines t)
#+end_src

* Local Setup
#+begin_src emacs-lisp
  (pcase system-name
    ("Saffron.local" (progn
                       (setq exec-path
                             '("/usr/local/bin" "/usr/bin" "/bin" "/usr/sbin" "/sbin"))
                       (setenv "PATH" (mapconcat 'concat
                                                 (append '("/usr/local/pear/bin"
                                                           "/usr/local/bin"
                                                           "/Users/echosa/.cask/bin")
                                                         (list (getenv "PATH")))
                                                 ":"))
                       (set-face-attribute 'default nil :family "Monaco" :height 110)
                       (when (window-system)
                         (ns-set-resource nil "ApplePressAndHoldEnabled" "NO")))))
#+end_src
